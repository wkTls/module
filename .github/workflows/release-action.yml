name: release
on:
  release:
    types: [published]
jobs:
  main:
    runs-on: ubuntu-latest
    env:
      ARCHIVE_NAME: ${{ github.event.repository.name }}-${{ github.event.release.tag_name }}
      PKG_FOLDER:  .${{ github.event.repository.name }}-${{ github.event.release.tag_name }}
    steps:
    
      - name: download-source
        run: curl -sL "${{ github.event.release.tarball_url }}" >"$ARCHIVE_NAME".tar.gz
        
      - name: unzip-source
        run: mkdir "$PKG_FOLDER" && tar -xzf "$ARCHIVE_NAME".tar.gz -C "$PKG_FOLDER" --strip-components 1
        
      - name: pre-source
        run: |
          mkdir pkg64
          mkdir pkg32
          mkdir Work64
          mkdir Work32
          mkdir Module64
          mkdir Module32
          rm -rf "$PKG_FOLDER"/{.github,assets}
          cp -r "$PKG_FOLDER"/ pkg64/"$PKG_FOLDER"/
          cp -r "$PKG_FOLDER"/ pkg32/"$PKG_FOLDER"/
        
      - name: fetch-data
        run: |
          cd Work64
          curl  https://qemu.weilnetz.de/w64/ --output page.txt
          cat page.txt
          cd ..
          cd Work32
          curl  https://qemu.weilnetz.de/w32/ --output page.txt
          cat page.txt
          cd ..
          tree
        
      - name: parse-data
        run: |
          cd Work64
          grep -o ">qemu-w64-setup-.*exe" page.txt | cut -c 2- > grep.txt
          echo Found URL: https://qemu.weilnetz.de/w64/"$(cat grep.txt)"
          ls * -r
          cd ..
          cd Work32
          grep -o ">qemu-w32-setup-.*exe" page.txt | cut -c 2- > grep.txt
          echo Found URL: https://qemu.weilnetz.de/w32/"$(cat grep.txt)"
          ls * -r
          cd ..
       
      - name: download-data
        run: |
          cd Work64
          echo Download URL: https://qemu.weilnetz.de/w64/"$(cat grep.txt)"
          curl https://qemu.weilnetz.de/w64/"$(cat grep.txt)" --output qemu-w64.exe
          cd ..
          cd Work32
          echo Download URL: https://qemu.weilnetz.de/w32/"$(cat grep.txt)"
          curl https://qemu.weilnetz.de/w32/"$(cat grep.txt)" --output qemu-w32.exe
          cd ..  
          tree
        
      - name: extract-data-64
        id: extract-data-64
        uses: edgarrc/action-7z@v1
        with:
          args: 7z x Work64/qemu-w64.exe -oModule64/
          
      - name: extract-data-32
        id: extract-data-32
        uses: edgarrc/action-7z@v1
        with:
          args: 7z x Work32/qemu-w32.exe -oModule32/
 
      - name: clean-module
        run: |
          sudo chmod -R o+rwx Module64/
          cd Module64/
          sudo rm -rf *PLUGINSDIR/
          cd ..
          sudo chmod -R o+rwx Module32/
          cd Module32/
          sudo rm -rf *PLUGINSDIR/
          cd ..
          
      - name: copy-module
        run: |
          cp -r Module64/. pkg64/"$PKG_FOLDER"/
          cd pkg64/
          cd "$PKG_FOLDER"/
          sudo rm -rf README.md
          echo Final Package files
          ls *
          cd ..
          cd ..
          cp -r Module32/. pkg32/"$PKG_FOLDER"/
          cd pkg32/
          cd "$PKG_FOLDER"/
          sudo rm -rf README.md
          echo Final Package files
          ls *
          cd ..
          cd ..
          echo Root
          ls *
          
      - name: package-info
        run: |
          cd pkg64/
          echo "auto generate package" > package.info
          cat package.info
          cd ..
          cd pkg32/
          echo "auto generate package" > package.info
          cat package.info
          cd ..
        
      - name: create-archive
        run: |
          cd pkg64/
          tar -cvf "$ARCHIVE_NAME".tar "$PKG_FOLDER"
          sha256sum "$ARCHIVE_NAME".tar > .sha256sum
          tar rf "$ARCHIVE_NAME".tar package.info .sha256sum
          cd ..
          cd pkg32/
          tar -cvf "$ARCHIVE_NAME".tar "$PKG_FOLDER"
          sha256sum "$ARCHIVE_NAME".tar > .sha256sum
          tar rf "$ARCHIVE_NAME".tar package.info .sha256sum
          cd ..
          
      - name: compress-archive
        run: |
          cd pkg64/
          gzip "$ARCHIVE_NAME".tar
          cd ..
          cd pkg32/
          gzip "$ARCHIVE_NAME".tar
          cd ..
          
      - name: create-checksum
        id: create-checksum
        run: |
          cd pkg64/
          sha256sum "$ARCHIVE_NAME".tar.gz > "$ARCHIVE_NAME".sha256
          echo "checksum = $(cut -d ' ' -f 1 "$ARCHIVE_NAME".sha256)"  >> $GITHUB_OUTPUT
          cd ..
          cd pkg32/
          sha256sum "$ARCHIVE_NAME".tar.gz > "$ARCHIVE_NAME".sha256
          echo "checksum = $(cut -d ' ' -f 1 "$ARCHIVE_NAME".sha256)"  >> $GITHUB_OUTPUT
          cd ..
          
      - name: upload-archive-64
        id: upload-archive-64
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: pkg64/${{ env.ARCHIVE_NAME }}.tar.gz
          asset_name: pkg64/${{ env.ARCHIVE_NAME }}.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: upload-archive-32
        id: upload-archive-32
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: pkg32/${{ env.ARCHIVE_NAME }}.tar.gz
          asset_name: pkg32/${{ env.ARCHIVE_NAME }}.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: upload-checksum-64
        id: upload-checksum-64
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: pkg64/${{ env.ARCHIVE_NAME }}.sha256
          asset_name: pkg64/${{ env.ARCHIVE_NAME }}.sha256
          asset_content_type: text/plain
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: upload-checksum-32
        id: upload-checksum-32
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: pkg32/${{ env.ARCHIVE_NAME }}.sha256
          asset_name: pkg32/${{ env.ARCHIVE_NAME }}.sha256
          asset_content_type: text/plain
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: discord-webhook
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.WEBHOOK_URL }}
          content: "Test"
            
      - if: failure() 
        name: rollback-release(delete tag/id)
        run: |
          curl -s -X DELETE \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.event.repository.full_name }}/releases/${{ github.event.release.id }}
          curl -s -X DELETE \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.event.repository.full_name }}/git/refs/tags/${{ github.event.release.tag_name }}